<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)\..\SEV.Samples.Domain.Model\bin\SEV.Samples.Domain.Model.dll" #>
<#@ assembly name="$(ProjectDir)\..\SEV.Samples.Domain.Model\bin\SEV.Domain.Model.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SEV.Samples.Entities" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ output extension=".cs" #>
<#
  var baseEntityType = typeof(SEV.Domain.Model.Entity);
  var entityTypes = GetEntityTypes(baseEntityType);

  foreach (var entityType in entityTypes)
  {
	var proporties =  entityType.GetProperties();

    var simpleProperties = proporties.Where(p => p.PropertyType.IsValueType || p.PropertyType == typeof(string)).ToList();

    var referenceProperties = proporties.Where(p => p.PropertyType.IsSubclassOf(baseEntityType)).ToList();

    var collectionProperties = proporties.Where(p => p.PropertyType.IsGenericType &&
													 p.PropertyType.Name.StartsWith("ICollection")).ToList();

    var parentEntityType = entityTypes.FirstOrDefault(t => entityType.IsSubclassOf(t));
    if (parentEntityType != null)
    {
        var parentProporties =  parentEntityType.GetProperties();
        simpleProperties = simpleProperties.Where(p => parentProporties.All(x => x.Name != p.Name)).ToList();
        referenceProperties = referenceProperties.Where(p => parentProporties.All(x => x.Name != p.Name)).ToList();
        collectionProperties = collectionProperties.Where(p => parentProporties.All(x => x.Name != p.Name)).ToList();
    }

#>namespace SEV.Samples.UI.Model.Contract
{
    public partial interface I<#=entityType.Name#>Model : SEV.UI.Model.Contract.IEditableModel<#if (parentEntityType != null) {this.Write(string.Format(", I{0}Model", parentEntityType.Name));}#>

    {
<#
    GenerateSimpleProperties(simpleProperties);
	GenerateReferenceProperties(referenceProperties);
	GenerateCollectionProperties(collectionProperties);
#>
    }
}
<#  
    SaveGeneratedCodeAsFile("I" + modelType.Name + "Model.g.cs");
  }
#>

<#+ 
  private IEnumerable<Type> GetModelTypes()
  {
    string assemblyPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "..", "SEV.Samples.Domain.Model",
									   "bin", "SEV.Samples.Domain.Model.dll");
    var entityType = typeof(SEV.Domain.Model.Entity);

	return Assembly.LoadFrom(assemblyPath).GetTypes().Where(t => t.IsSubclassOf(entityType) && !t.IsAbstract);
  }

  private void SaveGeneratedCodeAsFile(string fileName)
  {
    string hostDir = Path.GetDirectoryName(Host.TemplateFile);
    string outputDir = Path.Combine(hostDir, "GeneratedModelContracts");
    if (!System.IO.Directory.Exists(outputDir))
    {
        System.IO.Directory.CreateDirectory(outputDir);
    }
    string outputFilePath = Path.Combine(outputDir, fileName);
    System.IO.File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 

    GenerationEnvironment.Clear();
  }

  private string GetTypeName(Type type)
  {
	if (type.IsGenericType && type.Name.StartsWith("Nullable"))
	{
	  return GetCSharpTypeName(type.GenericTypeArguments[0]) + "?";
	}
	else
	{
	  return GetCSharpTypeName(type);
	}
  }

  private string GetCSharpTypeName(Type type)
  {
    string typeName;

    using (var provider = new CSharpCodeProvider())
    {
      var typeRef = new CodeTypeReference(type);
      typeName = provider.GetTypeOutput(typeRef);
    }

	return typeName;
  }

  private void GenerateSimpleProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties.Where(x => !x.Name.Contains("Id")))
    {
      var propertyType = GetTypeName(property.PropertyType);
      var propertyName= property.Name;
#>
        <#=propertyType#> <#=propertyName#> { get; set; }
<#+ 
    }
  }

  private void GenerateReferenceProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
      var propertyType = property.PropertyType.Name;
      var propertyName= property.Name;
#>
        I<#= propertyType #>Model <#= propertyName #> { get; set; }
<#+   
    }
  }

  private void GenerateCollectionProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
      var itemType = property.PropertyType.GenericTypeArguments[0].Name;
      var propertyName= property.Name;
#>
        System.Collections.Generic.IList<I<#= itemType #>Model> <#= propertyName #> { get; }
<#+  
    }
  }
#>
