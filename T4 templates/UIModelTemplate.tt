<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="$(ProjectDir)\..\SEV.Samples.Domain.Model\bin\SEV.Samples.Domain.Model.dll" #>
<#@ assembly name="$(ProjectDir)\..\SEV.Samples.Domain.Model\bin\SEV.Domain.Model.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SEV.Domain.Model" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ output extension=".cs" #>
<#
  foreach (var modelType in GetModelTypes())
  {
	var proporties =  modelType.GetProperties();

    var simpleProperties = proporties.Where(p => p.PropertyType.IsValueType || p.PropertyType == typeof(string)).ToList();

    var referenceProperties = proporties.Where(p => p.PropertyType.IsSubclassOf(typeof(SEV.Domain.Model.Entity))).ToList();

    var collectionProperties = proporties.Where(p => p.PropertyType.IsGenericType &&
													 p.PropertyType.Name.StartsWith("ICollection")).ToList();

#>using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using SEV.Samples.Domain.Model;
using SEV.Samples.UI.Model.Contract;
using SEV.Service.Contract;
using SEV.UI.Model;

namespace SEV.Samples.UI.Model
{
    [GeneratedCode("SEV.FWK.UI.Model", "0.5.0.2")]
    public partial class <#=modelType.Name#>Model : EditableModel<<#=modelType.Name#>>, I<#=modelType.Name#>Model
    {
        public <#=modelType.Name#>Model(IQueryService qservice, ICommandService cservice, IValidationService vservice)
	        : base(qservice, cservice, vservice)
        {
        }

<#
    GenerateSimpleProperties(simpleProperties);
	GenerateReferenceProperties(referenceProperties);
	GenerateCollectionProperties(collectionProperties);

	var parentProperty = referenceProperties.SingleOrDefault(p => p.GetCustomAttributes(false).Any(a => a is ParentAttribute));
#>
    }

    public partial class <#=modelType.Name#>ListModel : ListModel<I<#=modelType.Name#>Model, <#=modelType.Name#>>, I<#=modelType.Name#>ListModel
    {
<#  if (parentProperty == null)
    {
#>
        public <#=modelType.Name#>ListModel(IQueryService queryService) : base(queryService)
        {
        }
<#  }
    else
    {
#>
        public <#=modelType.Name#>ListModel(IQueryService queryService, IParentEntityFilterProvider filterProvider)
            : base(queryService, filterProvider)
        {
            ParentEntityExpression = x => x.<#=parentProperty.Name#>;
        }
<#  }
#>
    }
}
<#  
  SaveGeneratedCodeAsFile(modelType.Name + "Model.g.cs");
  }
#>

<#+ 
  private IEnumerable<Type> GetModelTypes()
  {
    string assemblyPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "..", "SEV.Samples.Domain.Model",
									   "bin", "SEV.Samples.Domain.Model.dll");
    var entityType = typeof(SEV.Domain.Model.Entity);

	return Assembly.LoadFrom(assemblyPath).GetTypes().Where(t => t.IsSubclassOf(entityType) && !t.IsAbstract);
  }

  private void SaveGeneratedCodeAsFile(string fileName)
  {
    string hostDir = Path.GetDirectoryName(Host.TemplateFile);
    string outputDir = Path.Combine(hostDir, "GeneratedModels");
    if (!System.IO.Directory.Exists(outputDir))
    {
        System.IO.Directory.CreateDirectory(outputDir);
    }
    string outputFilePath = Path.Combine(outputDir, fileName);
    System.IO.File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 

    GenerationEnvironment.Clear();
  }

  private string GetTypeName(Type type)
  {
	if (type.IsGenericType && type.Name.StartsWith("Nullable"))
	{
	  return GetCSharpTypeName(type.GenericTypeArguments[0]) + "?";
	}
	else
	{
	  return GetCSharpTypeName(type);
	}
  }

  private string GetCSharpTypeName(Type type)
  {
    string typeName;

    using (var provider = new CSharpCodeProvider())
    {
      var typeRef = new CodeTypeReference(type);
      typeName = provider.GetTypeOutput(typeRef);
    }

	return typeName;
  }

  private void GenerateSimpleProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties.Where(x => !x.Name.Contains("Id")))
    {
      var propertyType = GetTypeName(property.PropertyType).Replace("System.", "");
      var propertyName= property.Name;
#>
        public <#=propertyType#> <#=propertyName#>
		{
		    get { return GetValue(x => x.<#=propertyName#>); }
		    set { SetValue(value); }
		}

<#+ 
    }
  }

  private void GenerateReferenceProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
      var propertyType = property.PropertyType.Name;
      var propertyName= property.Name;
#>
        public I<#= propertyType #>Model <#= propertyName #>
		{
		    get { return GetReference<I<#= propertyType #>Model, <#= propertyType #>>(); }
		    set { SetReference<I<#= propertyType #>Model, <#= propertyType #>> (value); }
		}

<#+   
    }
  }

  private void GenerateCollectionProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
      var itemType = property.PropertyType.GenericTypeArguments[0].Name;
      var propertyName= property.Name;
#>
        public IList<I<#= itemType #>Model> <#= propertyName #>
        {
            get { return GetCollection<I<#= itemType #>Model, <#= itemType #>>(); }
        }

<#+  
    }
  }
#>